import { Cache } from '@klasa/cache';
import { Structure } from './base/Structure';
import { MessageMentions } from './messages/MessageMentions';
import { Embed } from './Embed';
import { MessageFlags } from '../../../util/bitfields/MessageFlags';
import { MessageAttachment } from './messages/MessageAttachment';
import { MessageReactionStore } from '../stores/MessageReactionStore';
import { MessageReaction } from './messages/MessageReaction';

import type { APIMessageData, APIMessageActivityData, APIMessageApplicationData, APIMessageReferenceData, MessageType } from '@klasa/dapi-types';
import type { User } from './User';
import type { Guild } from './guilds/Guild';
import type { Client } from '../../Client';
import type { DMChannel } from './channels/DMChannel';
import type { TextChannel } from './channels/TextChannel';
import type { NewsChannel } from './channels/NewsChannel';
import type { GuildMember } from './guilds/GuildMember';

export class Message extends Structure {

	/**
	 * Id of the message.
	 * @since 0.0.1
	 */
	public readonly id: string;

	/**
	 * The channel the message was sent in.
	 * @since 0.0.1
	 */
	public readonly channel: DMChannel | TextChannel | NewsChannel;

	/**
	 * The guild the message was sent in.
	 * @since 0.0.1
	 */
	public readonly guild: Guild | null;

	/**
	 * Author of this message.
	 * @since 0.0.1
	 */
	public readonly author: User;

	/**
	 * The author's member data, always null if {@link Message#guild} is null.
	 * @since 0.0.1
	 */
	public readonly member: GuildMember | null;

	/**
	 * When this message was sent.
	 * @since 0.0.1
	 */
	public readonly createdTimestamp!: number;

	/**
	 * The mentions.
	 * @since 0.0.1
	 */
	public readonly mentions: MessageMentions;

	/**
	 * The attached files.
	 * @since 0.0.1
	 */
	public readonly attachments: Cache<string, MessageAttachment>;

	/**
	 * Contents of the message.
	 * @since 0.0.1
	 */
	public content!: string;

	/**
	 * When this message was edited (or null if never).
	 * @since 0.0.1
	 */
	public editedTimestamp!: number | null;

	/**
	 * Whether or not this was a TTS message.
	 * @since 0.0.1
	 */
	public tts!: boolean;

	/**
	 * The embedded data.
	 * @since 0.0.1
	 */
	public embeds: Embed[] = [];

	/**
	 * Reactions to the message.
	 * @since 0.0.1
	 */
	public readonly reactions: MessageReactionStore;

	/**
	 * Used for validating a message was sent.
	 * @since 0.0.1
	 */
	public readonly nonce?: string | null;

	/**
	 * Whether or not this message is pinned.
	 * @since 0.0.1
	 */
	public pinned!: boolean;

	/**
	 * If the message is generated by a webhook, this is the webhook's id.
	 * @since 0.0.1
	 */
	public readonly webhookID?: string;

	/**
	 * The type of message.
	 * @since 0.0.1
	 * @see https://discord.com/developers/docs/resources/channel#message-object-message-types
	 */
	public readonly type: MessageType;

	/**
	 * Sent with Rich Presence-related chat embeds.
	 * @since 0.0.1
	 */
	public readonly activity?: APIMessageActivityData;

	/**
	 * Sent with Rich Presence-related chat embeds.
	 * @since 0.0.1
	 */
	public readonly application?: APIMessageApplicationData;

	/**
	 * Reference data sent with crossposted messages.
	 * @since 0.0.1
	 */
	public readonly reference?: APIMessageReferenceData;

	/**
	 * Describes extra features of the message.
	 * @since 0.0.1
	 * @see https://discord.com/developers/docs/resources/channel#message-object-message-flags
	 */
	public flags!: MessageFlags;

	public constructor(client: Client, data: APIMessageData) {
		super(client);
		this.id = data.id;
		this.attachments = new Cache();
		this.reactions = new MessageReactionStore(client);
		this.guild = data.guild_id ? this.client.guilds.get(data.guild_id) ?? null : null;
		this.channel = this.guild ? this.guild.channels.get(data.channel_id) as TextChannel | NewsChannel : this.client.dms.get(data.channel_id) as DMChannel;
		// eslint-disable-next-line dot-notation
		this.author = this.client.users['_add'](data.author);
		// eslint-disable-next-line dot-notation
		this.member = data.member && this.guild ? this.guild.members['_add']({ ...data.member, user: data.author }) : null;
		this.createdTimestamp = new Date(data.timestamp).getTime();
		this.mentions = new MessageMentions(this, data.mentions, data.mention_roles, data.mention_channels, data.mention_everyone);
		this.type = data.type;

		if (Reflect.has(data, 'nonce')) this.nonce = data.nonce;
		if (Reflect.has(data, 'webhook_id')) this.webhookID = data.webhook_id;
		if (Reflect.has(data, 'activity')) this.activity = data.activity;
		if (Reflect.has(data, 'application')) this.application = data.application;
		if (Reflect.has(data, 'message_reference')) this.reference = data.message_reference;

		this._patch(data);
	}

	/**
	 * When this message was sent.
	 * @since 0.0.1
	 */
	public get createdAt(): Date {
		return new Date(this.createdTimestamp);
	}

	/**
	 * When this message was edited (or null if never).
	 * @since 0.0.1
	 */
	public get editedAt(): Date | null {
		return this.editedTimestamp ? new Date(this.editedTimestamp) : null;
	}

	protected _patch(data: Partial<APIMessageData>): this {
		if (Reflect.has(data, 'content')) this.content = data.content as string;
		if (Reflect.has(data, 'edited_timestamp')) this.editedTimestamp = data.edited_timestamp ? new Date(data.edited_timestamp).getTime() : null;
		if (Reflect.has(data, 'tts')) this.tts = data.tts as boolean;

		if (data.reactions) {
			this.reactions.clear();
			for (const reaction of data.reactions) {
				const messageReaction = new MessageReaction(this.client, reaction, this);
				this.reactions.set(messageReaction.id, messageReaction);
			}
		}

		if (data.attachments) for (const attachment of data.attachments) this.attachments.set(attachment.id, new MessageAttachment(attachment));
		if (data.embeds) for (const embed of data.embeds) this.embeds.push(new Embed(embed));

		if (Reflect.has(data, 'pinned')) this.pinned = data.pinned as boolean;
		if (Reflect.has(data, 'flags')) this.flags = new MessageFlags(data.flags);
		return this;
	}

}

export interface Message {
	readonly client: Client;
}
